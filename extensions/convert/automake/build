#!/bin/sh
clear; CUR=$(pwd); . ../functions; cpuType

APP_NAME="automake"
APP_DESC="AutoMake"
APP_FILE="${APP_NAME}-VERSION.tar.xz"
APP_HOST="https://ftp.gnu.org/gnu/${APP_NAME}/${APP_FILE}"
APP_DEPS=""

BLD_EXTS="compiletc squashfs-tools wget"

#############################
showapp "$APP_DESC"

prepare()
{
    #echo "${CYAN}Preparation${NORMAL}"
    extload $BLD_EXTS
}

get_version()
{
    #echo "  ${YELLOW}Obtaining Current Version${NORMAL}"
    mkdir -p $CUR/tmp; sudo rm $CUR/tmp -fR; mkdir -p $CUR/tmp; cd $CUR/tmp
    wget -q --no-check-certificate https://ftp.gnu.org/gnu/${APP_NAME} -O version.html
    cat version.html | grep ${APP_NAME} | grep href | grep ".tar.xz" | awk -F "<a " '{print $2}' > index
    cat index | awk -F "</a" '{print $1}' | awk -F "\"" '{print $2}' > index2
    cat index2 | grep -v doc | grep -v alpha | grep -v beta | grep -v rc | grep -v ".sig" > index3
    cat index3 | awk -F "${APP_NAME}-" '{print $2}' | awk -F ".tar" '{print $1}' | grep -v "a" | grep -v "b" | grep -v "c" > index4
    sort index4 > $CUR/versions.lst
    cd $CUR; sudo rm tmp -fR
    VERSION=$(tail -n 1 $CUR/versions.lst)
#    echo $VERSION
}

get_sources()
{
    mkdir -p $CUR/src; cd $CUR/src
    extload quiet wget
    FILE=${APP_FILE//VERSION/$VERSION}
    HOST=${APP_HOST//VERSION/$VERSION}
    if [ ! -f $CUR/src/${FILE} ]; then
        echo "${CYAN}Downloading Source $HOST ${NORMAL}"
        wget --no-check-certificate $HOST || exit 1
    fi
    if [ ! -d $CUR/src/${APP_NAME}-${VERSION} ]; then
        tar -xf $FILE
    fi
}

do_configure()
{
    echo "${CYAN}Configuring v${VERSION}${NORMAL}"
    cd $CUR/src/${APP_NAME}-${VERSION}
    ./configure > $CUR/_configure.log 2>&1 || exit 1
}

do_compile()
{
    echo "${CYAN}Compiling${NORMAL}"
    make -j$(nproc) > $CUR/_compile.log 2>&1 || exit 1
}

do_install()
{
    echo "${CYAN}Installing${NORMAL}"
    [ -d $CUR/bin/${VERSION} ] && sudo rm $CUR/bin/${VERSION} -fR
    make -j$(nproc) DESTDIR=$CUR/bin/${VERSION} install > $CUR/_install.log 2>&1 || exit 1
}

do_package()
{
    echo "${CYAN}Packaging${NORMAL}"
    cd $CUR/bin/${VERSION}
    tar -zcf $CUR/${APP_NAME}-${VERSION}-${CPU}.tar.gz *
    mv $CUR/${APP_NAME}-${VERSION}-${CPU}.tar.gz $REPO
}

################################
 ###                        ###
  ### COMMAND LINE OPTIONS ###
 ###                        ###
################################
for i in $@
do
    case $i in
        *=*)
            case $i in
                ver*)  VERSION=${i#*=} ;;
            esac ;;
        *)
            case $i in
                clean) DO_CLEAN=1 ;;
            esac ;;
    esac
done



prepare
[ "${VERSION}" == "" ] && get_version
[ ! "${DO_CLEAN}" == "" ] && rm $CUR/src/${APP_NAME}-${VERSION} -fR >/dev/null 2>&1
get_sources
do_configure
do_compile
do_install
do_package

echo "${GREEN}Done.${NORMAL}"










#!/bin/sh

APP="automake"

clear; CUR=$(pwd); OLD=$CUR; . ../functions; cpuType

SFX=$CPU
SXX=${SFX/x86_/x}

title

extload quiet wget

cd $CUR; mkdir -p $CUR/bin $CUR/src
[ ! -f $CUR/versions.lst ] && touch $CUR/versions.lst

VERSION=$(cat versions.lst | grep ":${APP}:" | awk -F: '{print $3}')
if [ "${VERSION}" == "" ]; then
    echo "  ${YELLOW}Obtaining Current Version${NORMAL}"; mkdir -p $CUR/tmp; sudo rm $CUR/tmp -fR; mkdir -p $CUR/tmp; cd $CUR/tmp
    wget -q https://ftp.gnu.org/gnu/${APP} -O - | grep ${APP} | grep href | grep ".tar.xz" | awk -F "<a " '{print $2}' > index
    cat index | awk -F "</a" '{print $1}' | awk -F "\"" '{print $2}' > index2
    cat index2 | grep -v doc | grep -v alpha | grep -v beta | grep -v rc | grep -v ".sig" > index3
    cat index3 | awk -F "${APP}-" '{print $2}' | awk -F ".tar" '{print $1}' | grep -v "a" | grep -v "b" | grep -v "c" > index4
    sort index4 > index5
    J=0; N=0; V=0
    for item in $(cat index5)
    do
        MAJ=$(echo $item | awk -F. '{print $1}'); MIN=$(echo $item | awk -F. '{print $2}'); REV=$(echo $item | awk -F. '{print $3}'); [ "${REV}" == "" ] && REV=0
        if [ $MAJ -gt $J ]; then J=$MAJ; N=$MIN; V=$REV; fi; if [ $MIN -gt $N ]; then N=$MIN; V=$REV; fi; if [ $REV -gt $V ]; then V=$REV; fi
    done
    VERSION="${J}.${N}.${V}"
    #[ "${V}" == "0" ] && 
    VERSION=$(echo $VERSION | awk -F. '{print $1 "." $2}')
    echo ":${APP}:${VERSION}" >> $CUR/versions.lst
    cd $CUR; sudo rm tmp -fR
fi
VERSION=$(cat versions.lst | grep ":${APP}:" | awk -F: '{print $3}')

###############

clear; title
cd $CUR; echo "${CYAN}Package ${GREEN}${APP} v${VERSION}${NORMAL}"
extload compiletc autoconf wget

sudo ldconfig >/dev/null 2>&1

if [ ! -f $CUR/dl/${APP}-${VERSION}.tar.xz ]; then
    echo "  ${YELLOW}Obtaining Source Code ${GREEN}${VERSION}${NORMAL}"
    mkdir -p $CUR/dl; cd $CUR/dl
    wget -q https://ftp.gnu.org/gnu/${APP}/${APP}-${VERSION}.tar.xz || exit 1
fi
if [ ! -d $CUR/src/${APP}-${VERSION} ]; then
    cd $CUR/src
    tar -xf $CUR/dl/${APP}-${VERSION}.tar.xz || exit 1
fi

cd $CUR/src/${APP}-${VERSION}

sed -i 's/extras//' Makefile.in
[ ! -d build ] && mkdir build
cd build
if [ ! -f ./.configured ]; then
    echo "  ${YELLOW}Configuring Source Code ${NORMAL}"
    ../configure --prefix=/usr/local >./.configured.log 2>&1 || exit 1
    find . -name Makefile -type f -exec sed -i 's/-g -O2//g' {} \;
    touch ./.configured
fi

if [ ! -f ./.compiled ]; then
    echo "  ${YELLOW}Compiling Source Code ${NORMAL}"
    [ -f ./.compiled.log ] && make clean >/dev/null 2>&1
    make -j$(nproc) >./.compiled.log 2>&1 || exit 1
    touch ./.compiled
fi

if [ ! -d $CUR/bin/${APP}-${VERSION} ]; then
    echo "  ${YELLOW}Installing Source Code ${NORMAL}"
    make DESTDIR=$CUR/bin/${APP}-${VERSION} install >./.installed.log 2>&1 || exit 1
fi










cd $CUR/bin
mv ${APP}-${VERSION} ${APP}
mkdir -p ${APP}-doc/usr/local/share
mv ${APP}/usr/local/share/man ${APP}-doc/usr/local/share

mkdir -p $CUR/pkg && rm $CUR/pkg -fR && mkdir -p $CUR/pkg
echo "  ${CYAN}Packaging Binaries${NORMAL}"
mksquashfs ${APP} $CUR/pkg/${APP}.tcz >/dev/null 2>&1 || exit 1
echo "  ${CYAN}Packaging Documents${NORMAL}"
mksquashfs ${APP}-doc $CUR/pkg/${APP}-doc.tcz >/dev/null 2>&1 || exit 1

cd $CUR/bin/${APP}
find . -type f > $CUR/pkg/${APP}.tcz.list
nodot $CUR/pkg/${APP}.tcz.list

cd $CUR/bin/${APP}-doc
find . -type f > $CUR/pkg/${APP}-doc.tcz.list
nodot $CUR/pkg/${APP}-doc.tcz.list

cd $CUR/pkg
md5sum ${APP}.tcz > ${APP}.tcz.md5.txt
md5sum ${APP}-doc.tcz > ${APP}-doc.tcz.md5.txt








rm $CUR/src -fR
rm $CUR/bin -fR






