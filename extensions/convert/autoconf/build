#!/bin/sh
clear; CUR=$(pwd); . ../functions; cpuType

APP_NAME="autoconf"
APP_DESC="Auto Configuration"
APP_FILE="${APP_NAME}-VERSION.tar.xz"
APP_HOST="https://ftp.gnu.org/gnu/${APP_NAME}/${APP_FILE}"
APP_DEPS=""

BLD_EXTS="compiletc squashfs-tools wget"

#############################
showapp "$APP_DESC"

prepare()
{
    #echo "${CYAN}Preparation${NORMAL}"
    extload $BLD_EXTS
}

get_version()
{
    mkdir -p $CUR/tmp; sudo rm $CUR/tmp -fR; mkdir -p $CUR/tmp; cd $CUR/tmp
    wget -q --no-check-certificate https://ftp.gnu.org/gnu/${APP_NAME} -O versions.html
    cat versions.html | grep ${APP_NAME} | grep href | grep ".tar.xz" | awk -F "<a " '{print $2}' > index
    cat index | awk -F "</a" '{print $1}' | awk -F "\"" '{print $2}' > index2
    cat index2 | grep -v doc | grep -v alpha | grep -v beta | grep -v rc | grep -v ".sig" > index3
    cat index3 | awk -F "${APP_NAME}-" '{print $2}' | awk -F ".tar" '{print $1}' | grep -v "a" | grep -v "b" | grep -v "c" > index4
    sort index4 > $CUR/versions.lst
    cd $CUR
    sudo rm tmp -fR
    VERSION=$(tail -n 1 $CUR/versions.lst)
    echo "${VERSION}"
}

get_sources()
{
    mkdir -p $CUR/src; cd $CUR/src
    extload quiet wget

    FILE=${APP_FILE//VERSION/$VERSION}
    HOST=${APP_HOST//VERSION/$VERSION}
#    echo $HOST
#    echo $FILE
#    exit

    if [ ! -f $CUR/src/${FILE} ]; then
        echo "${CYAN}Downloading Source${NORMAL}"
        #echo "VER: [${VERSION}]"
        #URL="https://ftp.gnu.org/gnu/${APP_NAME}/${APP_NAME}-${VERSION}.tar.xz"
        #echo "URL: [${URL}]"
        #wget --no-check-certificate "${URL}" || exit 1
        wget -q --no-check-certificate $HOST || exit 1
    fi
    if [ ! -d $CUR/src/${APP_NAME}-${VERSION} ]; then
        tar -xf $FILE
    fi
}

do_configure()
{
    echo "${CYAN}Configuring v${VERSION}${NORMAL}"
    cd $CUR/src/${APP_NAME}-${VERSION}
    [ ! -d build ] && mkdir build
    cd build
    #./configure > $CUR/_configure.log 2>&1 || exit 1
    time ../configure --prefix=/usr/local >$CUR/_configure.log 2>&1 || exit 1
    find . -name Makefile -type f -exec sed -i 's/-g -O2//g' {} \;
}

do_compile()
{
    echo "${CYAN}Compiling${NORMAL}"
    time make -j$(nproc) > $CUR/_compile.log 2>&1 || exit 1
}

do_install()
{
    echo "${CYAN}Installing${NORMAL}"
    [ -d $CUR/bin/${VERSION} ] && sudo rm $CUR/bin/${VERSION} -fR
    time make -j$(nproc) DESTDIR=$CUR/bin/${VERSION} install > $CUR/_install.log 2>&1 || exit 1
}

do_package()
{
    echo "${CYAN}Packaging${NORMAL}"
    cd $CUR/bin/${VERSION}
    tar -zcf $CUR/${APP_NAME}-${VERSION}-${CPU}.tar.gz *
    mv $CUR/${APP_NAME}-${VERSION}-${CPU}.tar.gz $REPO
}

################################
 ###                        ###
  ### COMMAND LINE OPTIONS ###
 ###                        ###
################################
for i in $@
do
    case $i in
        *=*)
            case $i in
                ver*)  VERSION=${i#*=} ;;
            esac ;;
        *)
            case $i in
                clean) DO_CLEAN=1 ;;
            esac ;;
    esac
done



prepare
[ "${VERSION}" == "" ] && echo "${CYAN}Obtaining Version${NORMAL}" && VERSION=$(get_version)
[ ! "${DO_CLEAN}" == "" ] && rm $CUR/src/${APP_NAME}-${VERSION} -fR >/dev/null 2>&1
get_sources
do_configure
do_compile
do_install
do_package

echo "${GREEN}Done.${NORMAL}"
